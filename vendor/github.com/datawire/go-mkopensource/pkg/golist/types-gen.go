//go:build standalone
// +build standalone

package main

import (
	"bytes"
	"context"
	"fmt"
	"os"
	"os/exec"
	"strings"
)

func main() {
	if err := Main(context.Background()); err != nil {
		fmt.Printf("%s: error: %v\n", os.Args[0], err)
		os.Exit(1)
	}
}

func Main(ctx context.Context) error {
	help, err := exec.Command("go", "help", "list").Output()
	if err != nil {
		return err
	}

	var unfmtBuf bytes.Buffer
	fmt.Fprintln(&unfmtBuf, `
// THIS FILE IS GENERATED BY `+"`go run ./types-gen.go`"+`; DO NOT EDIT

package golist

import (
	"time"
)

// These definitions are copied verbatim from `+"`go help list`"+`.

`)

	depth := 0
	for _, line := range strings.Split(string(help), "\n") {
		if strings.HasPrefix(strings.TrimSpace(line), "type ") {
			depth++
		}
		if depth > 0 {
			fmt.Fprintln(&unfmtBuf, line)
		}
		if strings.TrimSpace(line) == "}" {
			depth--
			fmt.Fprintln(&unfmtBuf, "")
		}
	}

	gofmt := exec.Command("gofmt")
	gofmt.Stdin = &unfmtBuf

	fmtBuf, err := gofmt.Output()
	if err != nil {
		return err
	}

	if err := os.WriteFile("types.go", fmtBuf, 0666); err != nil {
		return err
	}

	return nil
}
